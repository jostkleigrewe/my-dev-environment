#######################################################################
# SERVICES
#######################################################################
services:

  #######################################################################
  # 1) Traefik - Reverse Proxy
  #######################################################################
  traefik:
    image: traefik:v${DOCKER_TRAEFIK_VERSION:-3.2}
    restart: unless-stopped
    container_name: traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # tells Traefik to listen to docker
      - "--providers.docker=true"
#      - "--entrypoints.web.address=:80"
#      - "--entrypoints.websecure.address=:443"
    ports:
      # The HTTP port
      - ${DOCKER_TRAEFIK_HTTP_PORT:-80}:80
      # The HTTPS port
      - ${DOCKER_TRAEFIK_HTTPS_PORT:-443}:443
      # The Web UI (enabled by --api.insecure=true)
      - ${DOCKER_TRAEFIK_UI_PORT:-8080}:8080
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Optional: Eigene Traefik-Konfiguration per Bind Mount
      # - ./traefik/traefik.yml:/traefik.yml:ro
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.traefik.rule=Host(`traefik.docker.localhost`)"
     - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      euripnet:
        aliases:
          - 'traefik.docker.localhost'


  #######################################################################
  # 2) WHOAMI - Beispiel-Container
  #######################################################################
  whoami:
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
#      - "traefik.http.routers.whoami.entrypoints=web"
#      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    restart: unless-stopped
    container_name: whoami
#    ports:
#      - "80:80"
    networks:
      euripnet:
        aliases:
          - 'whoami.docker.localhost'


  #######################################################################
  # 3) MySQL-Datenbank
  #######################################################################
  database:
    image: mysql:${DOCKER_MYSQL_VERSION?8.0}
    restart: unless-stopped
    container_name: database
    volumes:
      - type: volume
        source: mysql-volume
        target: /var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: '%'
    ports:
      - ${DOCKER_MYSQL_PORT:-3306}:3306
    expose:
      - 3306
    networks:
      euripnet:
        aliases:
          - 'database.docker.localhost'

  #######################################################################
  # 4) phpMyAdmin
  #######################################################################
  phpmyadmin:
    image: phpmyadmin:latest
    restart: unless-stopped
    container_name: phpmyadmin
    environment:
      - PMA_USER=root
      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - PMA_HOST=database
      - PMA_ARBITRARY=0
    depends_on:
      - database
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pma.rule=Host(`pma.docker.localhost`)"
    networks:
      euripnet:
        aliases:
          - 'pma.docker.localhost'

  #######################################################################
  # 5) Redis - Key-Value-Store
  #######################################################################
  redis:
    image: redis:${DOCKER_REDIS_VERSION?latest}
    restart: unless-stopped
    container_name: redis
#    command: [
#      "redis-server",
#      "--requirepass", "my_secret_password"
#    ]
#    environment:
#      - REDIS_PASSWORD=my_secret_password
#    ports:
#      - '6379:6379'
    expose:
      - 6379
    labels:
      - "traefik.enable=false"
    networks:
      euripnet:
        aliases:
          - 'redis.docker.localhost'


  #######################################################################
  # 6) Redis Commander - leichter Web-Client für Redis
  #######################################################################
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    container_name: redis-commander
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
#      - REDIS_PASSWORD=geheim
    expose:
      - "8081"
    depends_on:
      - redis
#    volumes:
#      - type: volume
#        source: redis-insight
#        target: /data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`redis-commander.docker.localhost`)"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"
    networks:
      euripnet:
        aliases:
          - 'redis-commander.docker.localhost'

  #######################################################################
  # 7) RedisInsight - erweiterte GUI & Monitoring
  #######################################################################
  redis-insight:
    image: redislabs/redisinsight:latest
    restart: unless-stopped
    container_name: redis-insight
    ports:
      - '5540:5540'
    expose:
      - "5540"
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-insight.rule=Host(`redis-insight.docker.localhost`)"
      - 'traefik.http.services.redis-insight.loadbalancer.server.scheme=http'
      - "traefik.http.services.redis-insight.loadbalancer.server.port=5540"
    volumes:
      - type: volume
        source: redis-insight-volume
        target: /data
    networks:
      euripnet:
        aliases:
          - 'redis-insight.docker.localhost'

  #######################################################################
  # 7) rabbitMQ
  #######################################################################
  rabbitmq:
    image: rabbitmq:${DOCKER_RABBITMQ_VERSION?4}-management
    restart: unless-stopped
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: 'rabbitmq'
      RABBITMQ_DEFAULT_PASS: 'geheim'
    expose:
      - 15672
      - 8080
    volumes:
      - type: volume
        source: rabbitmq-volume
        target: /var/lib/rabbitmq
    labels:
      - 'traefik.enable=true'
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.docker.localhost`)"
#      - 'traefik.http.services.rabbitmq.loadbalancer.server.scheme=http'
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.routers.rabbitmq-http.rule=Host(`rabbitmq-http.docker.localhost`)"
#      - 'traefik.http.services.rabbitmq-http.loadbalancer.server.scheme=http'
      - "traefik.http.services.rabbitmq-http.loadbalancer.server.port=8080"
    networks:
      euripnet:
        aliases:
          - 'rabbitmq.docker.localhost'












#######################################################################
# NETWORKS
#######################################################################
networks:
  euripnet:
    driver: bridge
    name: euripnet
#    ipam:
#      driver: default
#      config:
#        - subnet: 192.168.100.0/24


#######################################################################
# VOLUMES
#######################################################################
volumes:
  mysql-volume:
    name: ${DOCKER_MYSQL_VOLUME}
  redis-volume:
    name: ${DOCKER_REDIS_VOLUME}
  redis-insight-volume:
    name: ${DOCKER_REDIS_INSIGHT_VOLUME}
  rabbitmq-volume:
    name: ${DOCKER_RABBITMQ_VOLUME}








#
#
#services:
#
#  # rabbitMQ
#  rabbitmq:
#    image: rabbitmq:3-management
#    restart: unless-stopped
#    volumes:
#      - type: volume
#        source: rabbitmq-volume
#        target: /var/lib/rabbitmq
#    ports:
#      - ${DOCKER_RABBITMQ_PORT:-15672}:15672
#


#

#
#  # php-fpm
#  php:
#    #    user: "1000:1000"
#    build:
#      context: ./docker/image/php-fpm
#      args:
#        - COMPOSER_VERSION=${DOCKER_COMPOSER_VERSION?}
#        - PHP_VERSION=${DOCKER_PHP_VERSION}
#    restart: unless-stopped
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    ports:
#      - ${DOCKER_PHP_FPM_PORT:-9000}:9000
#
#  # nginx
#  nginx:
#    #    user: "1000:1000"
#    build: ./docker/image/nginx
#    restart: unless-stopped
#    depends_on:
#      - php
#      - database
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    ports:
#      - ${DOCKER_NGINX_PORT:-80}:80
#    environment:
#      - DOCKER_NGINX_HOST=${DOCKER_NGINX_HOST}
##
##  # node
##  node:
##    #    user: "1000:1000"
##    image: node:${DOCKER_NODE_VERSION}-alpine
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"
##
##  # yarn-watch
##  yarn-watch:
##    #    user: "1000:1000"
##    build:
##      context: ./docker/image/yarn-watch
##      args:
##        - NODE_VERSION=${DOCKER_NODE_VERSION?}
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"
#
## volumes

#
#
#
##services:
##  php:
##    build:
##      context: .
##      dockerfile: ./docker/php/Dockerfile
##    volumes:
##      - ./:/var/www/html
##    environment:
##      # Setze deine ENV Variablen hier, z.B. DB_Connection
##      # oder lade später aus einer separaten .env.docker Datei
##      - APP_ENV=local
##      - APP_DEBUG=true
##    # Falls du xdebug willst, können wir das später ergänzen.
##
##  nginx:
##    build:
##      context: .
##      dockerfile: ./docker/nginx/Dockerfile
##    ports:
##      - "8080:80"
##    volumes:
##      - ./:/var/www/html
##    depends_on:
##      - php
##
##  mysql:
##    image: mysql:8.0
##    # production-näher: setze dieselbe Version wie im späteren Prod-Setup
##    environment:
##      MYSQL_ROOT_PASSWORD: root
##      MYSQL_DATABASE: laravel
##      MYSQL_USER: laravel
##      MYSQL_PASSWORD: secret
##    volumes:
##      - mysql_data:/var/lib/mysql
##    ports:
##      - "3306:3306"
##
##volumes:
##  mysql_data:
#
#
#
#
#
#
