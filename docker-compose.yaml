services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
    restart: unless-stopped
    container_name: traefik
#    labels:
#      # Dashboard für Traefik, nur lokal
#      - "traefik.enable=true"
#      - "traefik.http.routers.traefik.rule=Host(`traefik.local`)"
#      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  whoami:
    image: traefik/whoami
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"
    restart: unless-stopped
    container_name: whoami


#    myapp:
#      build: ./myapp
#      labels:
#        - "traefik.enable=true"
#        - "traefik.http.routers.myapp.rule=Host(`myapp.local`)"
#        - "traefik.http.services.myapp.loadbalancer.server.port=80"


#  nginx:
#    build: ./docker/nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    networks:
#      - devnet
#    depends_on:
#      - php
#      - mysql
#    # hier kannst du auch volumes für deine Projektordner mounten
#
#  php:
#    build: ./docker/php
#    networks:
#      - devnet
#
#  mysql:
#    image: mysql:8
#    environment:
#      MYSQL_ROOT_PASSWORD: root
#      MYSQL_DATABASE: mydb
#    networks:
#      - devnet
#
#  phpmyadmin:
#    image: phpmyadmin/phpmyadmin
#    environment:
#      PMA_HOST: mysql
#    ports:
#      - "8080:80"
#    networks:
#      - devnet

#  node:
#    image: node:latest
#    networks:
#      - devnet
#    working_dir: /app
#    volumes:
#      - ./src:/app
#
#networks:
#  devnet:
#    driver: bridge
#

#
#
#services:
#
#  # rabbitMQ
#  rabbitmq:
#    image: rabbitmq:3-management
#    restart: unless-stopped
#    volumes:
#      - type: volume
#        source: rabbitmq-volume
#        target: /var/lib/rabbitmq
#    ports:
#      - ${DOCKER_RABBITMQ_PORT:-15672}:15672
#
#  # redis
#  redis:
#    image: redis:latest
#    restart: unless-stopped
#    expose:
#      - 6379
#
#  # database (mysql)
#  database:
#    image: mysql:${DOCKER_MYSQL_VERSION?8.0}
#    restart: unless-stopped
#    volumes:
#      - type: volume
#        source: mysql-volume
#        target: /var/lib/mysql
#    environment:
#      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
#      MYSQL_DATABASE: ${MYSQL_DATABASE}
#      MYSQL_USER: ${MYSQL_USER}
#      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
#      MYSQL_ROOT_HOST: '%'
#    ports:
#      - ${DOCKER_MYSQL_PORT:-3306}:3306
#
#  # phpmyadmin
#  phpmyadmin:
#    image: phpmyadmin:latest
#    restart: unless-stopped
#    environment:
#      - PMA_USER=root
#      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD}
#      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#      - PMA_HOST=database
#      - PMA_ARBITRARY=0
#    depends_on:
#      - database
#    ports:
#      - ${DOCKER_PMA_PORT:-81}:80
#
#  # php-fpm
#  php:
#    #    user: "1000:1000"
#    build:
#      context: ./docker/image/php-fpm
#      args:
#        - COMPOSER_VERSION=${DOCKER_COMPOSER_VERSION?}
#        - PHP_VERSION=${DOCKER_PHP_VERSION}
#    restart: unless-stopped
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    ports:
#      - ${DOCKER_PHP_FPM_PORT:-9000}:9000
#
#  # nginx
#  nginx:
#    #    user: "1000:1000"
#    build: ./docker/image/nginx
#    restart: unless-stopped
#    depends_on:
#      - php
#      - database
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    ports:
#      - ${DOCKER_NGINX_PORT:-80}:80
#    environment:
#      - DOCKER_NGINX_HOST=${DOCKER_NGINX_HOST}
##
##  # node
##  node:
##    #    user: "1000:1000"
##    image: node:${DOCKER_NODE_VERSION}-alpine
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"
##
##  # yarn-watch
##  yarn-watch:
##    #    user: "1000:1000"
##    build:
##      context: ./docker/image/yarn-watch
##      args:
##        - NODE_VERSION=${DOCKER_NODE_VERSION?}
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"
#
## volumes
#volumes:
#  mysql-volume:
#    name: ${DOCKER_MYSQL_VOLUME}
#  redis-phpstorm:
#    name: ${DOCKER_REDIS_VOLUME}
#  rabbitmq-volume:
#    name: ${DOCKER_RABBITMQ_VOLUME}
#
#
#
##services:
##  php:
##    build:
##      context: .
##      dockerfile: ./docker/php/Dockerfile
##    volumes:
##      - ./:/var/www/html
##    environment:
##      # Setze deine ENV Variablen hier, z.B. DB_Connection
##      # oder lade später aus einer separaten .env.docker Datei
##      - APP_ENV=local
##      - APP_DEBUG=true
##    # Falls du xdebug willst, können wir das später ergänzen.
##
##  nginx:
##    build:
##      context: .
##      dockerfile: ./docker/nginx/Dockerfile
##    ports:
##      - "8080:80"
##    volumes:
##      - ./:/var/www/html
##    depends_on:
##      - php
##
##  mysql:
##    image: mysql:8.0
##    # production-näher: setze dieselbe Version wie im späteren Prod-Setup
##    environment:
##      MYSQL_ROOT_PASSWORD: root
##      MYSQL_DATABASE: laravel
##      MYSQL_USER: laravel
##      MYSQL_PASSWORD: secret
##    volumes:
##      - mysql_data:/var/lib/mysql
##    ports:
##      - "3306:3306"
##
##volumes:
##  mysql_data:
#
#
#
#
#
#
