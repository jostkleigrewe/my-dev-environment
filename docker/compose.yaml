#######################################################################
# STACK
#######################################################################
name: my-dev-environment

#######################################################################
# SERVICES
#######################################################################
services:

  #######################################################################
  # Traefik - Reverse Proxy
  #######################################################################
  traefik:
    image: traefik:v${DOCKER_TRAEFIK_VERSION:-3.2}
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-traefik
    command:
      # Enables the web UI
      - "--api.insecure=true"
      # tells Traefik to listen to docker
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
#      - "--entrypoints.websecure.address=:443"
    ports:
      # The HTTP port
      - ${DOCKER_TRAEFIK_HTTP_PORT:-80}:80
      # The HTTPS port
      - ${DOCKER_TRAEFIK_HTTPS_PORT:-443}:443
      # The Web UI (enabled by --api.insecure=true)
      - ${DOCKER_TRAEFIK_UI_PORT:-8080}:8080
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Optional: Eigene Traefik-Konfiguration per Bind Mount
      # - ./traefik/traefik.yml:/traefik.yml:ro
    labels:
     - "traefik.enable=true"
     - "traefik.http.routers.traefik.rule=Host(`traefik.docker.localhost`)"
     - "traefik.http.services.traefik.loadbalancer.server.port=8080"
    networks:
      euripnet:
        aliases:
          - 'traefik.docker.localhost'


  #######################################################################
  # WHOAMI - Beispiel-Container
  #######################################################################
  whoami:
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
#      - "traefik.http.routers.whoami.entrypoints=web"
#      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-whoami
#    ports:
#      - "80:80"
    networks:
      euripnet:
        aliases:
          - 'whoami.docker.localhost'


  #######################################################################
  # MySQL-Datenbank
  #######################################################################
  database:
    image: mysql:${DOCKER_MYSQL_VERSION:-8.0}
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-database
    volumes:
      - type: volume
        source: mysql-volume
        target: /var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: "${MYSQL_ROOT_PASSWORD:-docker}"
      MYSQL_DATABASE: "${MYSQL_DATABASE:-exampledb}"
      MYSQL_USER: "${MYSQL_USER:-docker}"
      MYSQL_PASSWORD: "${MYSQL_PASSWORD:-docker}"
      MYSQL_ROOT_HOST: '%'
    ports:
      - ${DOCKER_MYSQL_PORT:-3306}:3306
    expose:
      - 3306
    networks:
      euripnet:
        aliases:
          - 'database.docker.localhost'


  #######################################################################
  # phpMyAdmin
  #######################################################################
  phpmyadmin:
    image: phpmyadmin:latest
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-phpmyadmin
    environment:
      - PMA_USER=root
      - PMA_PASSWORD=${MYSQL_ROOT_PASSWORD:-docker}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-docker}
      - PMA_HOST=database
      - PMA_ARBITRARY=1
    depends_on:
      - database
    expose:
      - 80
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pma.rule=Host(`pma.docker.localhost`)"
    networks:
      euripnet:
        aliases:
          - 'pma.docker.localhost'


  #######################################################################
  # Postgres
  #######################################################################
  postgres:
    image: postgres:${DOCKER_POSTGRES_VERSION:-17}-alpine
    container_name: ${DOCKER_PROJECT_NAME}-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DOCKER_POSTGRES_USER:-docker}
      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD:-docker}
      POSTGRES_DB: ${DOCKER_POSTGRES_DB:-example}
    expose:
      - "5432"
    volumes:
      - type: volume
        source: postgres-volume
        target: /var/lib/postgresql/data
    networks:
      euripnet:
        aliases:
          - 'postgres.docker.localhost'


  #######################################################################
  # pgadmin: UI für Postgres
  #######################################################################
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ${DOCKER_PROJECT_NAME}-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: ${DOCKER_POSTGRES_PASSWORD:-docker}
    expose:
      - "80"
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.docker.localhost`)"
    networks:
      euripnet:
        aliases:
          - 'pgadmin.docker.localhost'


  #######################################################################
  # mongodb
  #######################################################################
  mongodb:
    image: mongo:6
    container_name: ${DOCKER_PROJECT_NAME}-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: docker
      MONGO_INITDB_ROOT_PASSWORD: docker
    volumes:
      - type: volume
        source: mongodb-volume
        target: /data/db
    expose:
      - "27017"
    networks:
      euripnet:
        aliases:
          - 'mongodb.docker.localhost'


  #######################################################################
  # mongo-express: UI für mongodb
  #######################################################################
  mongo-express:
    image: mongo-express:latest
    container_name: ${DOCKER_PROJECT_NAME}-mongo-express
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_SERVER: mongodb.docker.localhost
      ME_CONFIG_MONGODB_ADMINUSERNAME: docker
      ME_CONFIG_MONGODB_ADMINPASSWORD: docker
      ME_CONFIG_BASICAUTH_USERNAME: docker
      ME_CONFIG_BASICAUTH_PASSWORD: docker
    expose:
      - "8081"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express.rule=Host(`mongo-express.docker.localhost`)"
      - "traefik.http.services.mongo-express.loadbalancer.server.port=8081"
    depends_on:
      - mongodb
    networks:
      euripnet:
        aliases:
          - 'mongo-express.docker.localhost'


  #######################################################################
  # localstack
  #######################################################################
  localstack:
    image: localstack/localstack:latest
    container_name: ${DOCKER_PROJECT_NAME}-localstack
    restart: unless-stopped
    environment:
      - SERVICES=s3,sqs,sns,dynamodb,lambda
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
#    volumes:
#      - type: volume
#        source: localstack-volume
#        target: /tmp/localstack/data
    expose:
      - "4566"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.localstack.rule=Host(`localstack.docker.localhost`)"
      - "traefik.http.services.localstack.loadbalancer.server.port=4566"
    networks:
      euripnet:
        aliases:
          - 'localstack.docker.localhost'


#  #######################################################################
#  # minio
#  #######################################################################
  minio:
    image: minio/minio:latest
    container_name: ${DOCKER_PROJECT_NAME}-minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: docker
      MINIO_ROOT_PASSWORD: docker123
    command: server /data --console-address ":9001"
    expose:
      - "9000" # S3 API
      - "9001" # Web-UI
#    ports:
#      - "9100:9000" # S3 API
#      - "9101:9001" # Web-UI
    volumes:
      - type: volume
        source: minio-volume
        target: /data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.minio.rule=Host(`minio.docker.localhost`)"
      - "traefik.http.services.minio.loadbalancer.server.port=9001"
      - "traefik.http.routers.minio-api.rule=Host(`minio-api.docker.localhost`)"
      - "traefik.http.services.minio-api.loadbalancer.server.port=9000"
    networks:
      euripnet:
        aliases:
          - 'minio.docker.localhost'


  #######################################################################
  # Elasticsearch
  #######################################################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${DOCKER_ELASTICSEARCH_VERSION:-8.10.2}
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
    expose:
      - "9200"
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 2g # Maximal 2 GB Speicher
          cpus: "1.0" # Maximal eine CPU
        reservations:
          memory: 1g # Mindestens 1
    volumes:
      - type: volume
        source: elasticsearch-volume
        target: /usr/share/elasticsearch/data
    networks:
      euripnet:
        aliases:
          - 'elasticsearch.docker.localhost'


  #######################################################################
  # Kibana
  #######################################################################
  kibana:
    image: docker.elastic.co/kibana/kibana:${DOCKER_ELASTICSEARCH_VERSION:-8.10.2}
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-kibana
#    volumes:
#      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch.docker.localhost:9200
    depends_on:
      - elasticsearch
    expose:
      - "5601"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`kibana.docker.localhost`)"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
    networks:
      euripnet:
        aliases:
          - 'kibana.docker.localhost'


  #######################################################################
  # Portainer
  #######################################################################
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - type: volume
        source: portainer-volume
        target: /data
    ports:
      - "8000:8000"
      - "9443:9443"
      - "9000:9000"
    expose:
      - "8000"  # Edge-Agent
      - "9443"  # Portainer UI HTTPS
      - "9000"  # Portainer UI HTTP
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.docker.localhost`)"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      euripnet:
        aliases:
          - 'portainer.docker.localhost'



  #######################################################################
  # Redis - Key-Value-Store
  #######################################################################
  redis:
    image: redis:${DOCKER_REDIS_VERSION?latest}
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-redis
#    command: [
#      "redis-server",
#      "--requirepass", "my_secret_password"
#    ]
#    environment:
#      - REDIS_PASSWORD=my_secret_password
#    ports:
#      - '6379:6379'
    expose:
      - 6379
    labels:
      - "traefik.enable=false"
    networks:
      euripnet:
        aliases:
          - 'redis.docker.localhost'


  #######################################################################
  # Redis Commander - leichter Web-Client für Redis
  #######################################################################
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-redis-commander
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
#      - REDIS_PASSWORD=geheim
    expose:
      - "8081"
    depends_on:
      - redis
#    volumes:
#      - type: volume
#        source: redis-insight
#        target: /data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-commander.rule=Host(`redis-commander.docker.localhost`)"
      - "traefik.http.services.redis-commander.loadbalancer.server.port=8081"
    networks:
      euripnet:
        aliases:
          - 'redis-commander.docker.localhost'


  #######################################################################
  # RedisInsight - erweiterte GUI & Monitoring
  #######################################################################
  redis-insight:
    image: redislabs/redisinsight:latest
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-redis-insight
    environment:
      - RI_APP_PORT=5540
    expose:
      - "5540"
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis-insight.rule=Host(`redis-insight.docker.localhost`)"
      - 'traefik.http.services.redis-insight.loadbalancer.server.scheme=http'
      - "traefik.http.services.redis-insight.loadbalancer.server.port=5540"
    volumes:
      - type: volume
        source: redis-insight-volume
        target: /data
    networks:
      euripnet:
        aliases:
          - 'redis-insight.docker.localhost'


  #######################################################################
  # rabbitMQ
  #######################################################################
  rabbitmq:
    image: rabbitmq:${DOCKER_RABBITMQ_VERSION:-4}-management
    restart: unless-stopped
    container_name: ${DOCKER_PROJECT_NAME}-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: 'docker'
      RABBITMQ_DEFAULT_PASS: 'geheim'
    expose:
      - 15672   # Management-UI
      - 5672    # Standard-AMQP-Port
    volumes:
      - type: volume
        source: rabbitmq-volume
        target: /var/lib/rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`rabbitmq.docker.localhost`)"
      - 'traefik.http.services.rabbitmq.loadbalancer.server.scheme=http'
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
    networks:
      euripnet:
        aliases:
          - 'rabbitmq.docker.localhost'


  #######################################################################
  # inbucket
  #######################################################################
  inbucket:
    image: inbucket/inbucket:latest
    container_name: ${DOCKER_PROJECT_NAME}-inbucket
    restart: unless-stopped
    expose:
      - 9000   # HTTP/Web UI
      - 2500   # SMTP
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inbucket.rule=Host(`inbucket.docker.localhost`)"
      - 'traefik.http.services.inbucket.loadbalancer.server.scheme=http'
      - "traefik.http.services.inbucket.loadbalancer.server.port=9000"
    networks:
      euripnet:
        aliases:
          - 'inbucket.docker.localhost'


  #######################################################################
  # maildev
  #######################################################################
  maildev:
    image: maildev/maildev
    container_name: ${DOCKER_PROJECT_NAME}-maildev
    restart: unless-stopped
    expose:
      - 1080   # HTTP/Web UI
      - 1025   # SMTP
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maildev.rule=Host(`maildev.docker.localhost`)"
      - 'traefik.http.services.maildev.loadbalancer.server.scheme=http'
      - "traefik.http.services.maildev.loadbalancer.server.port=1080"
    networks:
      euripnet:
        aliases:
          - 'maildev.docker.localhost'


  #######################################################################
  # mailhog
  #######################################################################
  mailhog:
    image: mailhog/mailhog
    container_name: ${DOCKER_PROJECT_NAME}-mailhog
    restart: unless-stopped
    expose:
      - 8025   # HTTP/Web UI
      - 1025   # SMTP
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailhog.rule=Host(`mailhog.docker.localhost`)"
      - 'traefik.http.services.mailhog.loadbalancer.server.scheme=http'
      - "traefik.http.services.mailhog.loadbalancer.server.port=8025"
    networks:
      euripnet:
        aliases:
          - 'mailhog.docker.localhost'


  #######################################################################
  # php
  #######################################################################
  php:
    build:
      context: image/php-fpm
      args:
        - COMPOSER_VERSION=${DOCKER_COMPOSER_VERSION:-2}
        - PHP_VERSION=${DOCKER_PHP_VERSION:-8.3}
    container_name: ${DOCKER_PROJECT_NAME}-php
    restart: unless-stopped
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - XDEBUG_MODE=debug
      - XDEBUG_CONFIG=remote_host=host.docker.internal
    volumes:
      - ./image/php-fpm/public:/code:cached
    expose:
      - "9000"
    networks:
      euripnet:
        aliases:
          - 'php.docker.localhost'


  #######################################################################
  # nginx
  #######################################################################
#  nginx:
#    build:
#      context: .
#      dockerfile: ./image/nginx/Dockerfile
#    container_name: ${DOCKER_PROJECT_NAME}-nginx
#    restart: unless-stopped
#    ports:
#      - "8080:80"
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    depends_on:
#      - php
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.mailhog.rule=Host(`nginx.docker.localhost`)"
#    networks:
#      euripnet:
#        aliases:
#          - 'nginx.docker.localhost'


#  # nginx
#  nginx:
#    #    user: "1000:1000"
#    build: ./image/nginx
#    restart: unless-stopped
#    depends_on:
#      - php
#      - database
#    volumes:
#      - "${DOCKER_PROJECT_FOLDER}:/code"
#    ports:
#      - ${DOCKER_NGINX_PORT:-80}:80
#    environment:
#      - DOCKER_NGINX_HOST=${DOCKER_NGINX_HOST}


  #######################################################################
  # node
  #######################################################################
  node:
    image: node:${DOCKER_NODE_VERSION}-alpine
    restart: no
    container_name: ${DOCKER_PROJECT_NAME}-node
    volumes:
      - "${DOCKER_PROJECT_FOLDER}:/code"
    working_dir: "/code"
    networks:
      euripnet:
        aliases:
          - 'node.docker.localhost'


#    image: node:20-alpine
#    container_name: ${DOCKER_PROJECT_NAME}-node
#    restart: unless-stopped
#    working_dir: /app
#    volumes:
#      - ./frontend:/app
#    command: sh -c "npm install && npm run serve"
#    networks:
#      - euripnet


##
##  # node
##  node:
##    #    user: "1000:1000"
##    image: node:${DOCKER_NODE_VERSION}-alpine
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"

##
##  # yarn-watch
##  yarn-watch:
##    #    user: "1000:1000"
##    build:
##      context: ./image/yarn-watch
##      args:
##        - NODE_VERSION=${DOCKER_NODE_VERSION?}
##    restart: no
##    volumes:
##      - "${DOCKER_PROJECT_FOLDER}:/code"
##    working_dir: "/code"
#



#######################################################################
# NETWORKS
#######################################################################
networks:
  euripnet:
    driver: bridge
    name: euripnet
#    ipam:
#      driver: default
#      config:
#        - subnet: 192.168.100.0/24


#######################################################################
# VOLUMES
#######################################################################
volumes:
  mysql-volume:
    name: ${DOCKER_MYSQL_VOLUME}
  redis-volume:
    name: ${DOCKER_REDIS_VOLUME}
  redis-insight-volume:
    name: ${DOCKER_REDIS_INSIGHT_VOLUME}
  rabbitmq-volume:
    name: ${DOCKER_RABBITMQ_VOLUME}
  portainer-volume:
    name: ${DOCKER_PORTAINER_VOLUME}
  elasticsearch-volume:
    name: ${DOCKER_ELASTICSEARCH_VOLUME}
  postgres-volume:
    name: ${DOCKER_POSTGRES_VOLUME}
  mongodb-volume:
    name: ${DOCKER_MONGODB_VOLUME}
  localstack-volume:
    name: ${DOCKER_LOCALSTACK_VOLUME}
  minio-volume:
    name: ${DOCKER_MINIO_VOLUME}
